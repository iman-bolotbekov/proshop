{"version":3,"file":"static/js/164.b9e69d47.chunk.js","mappings":"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","sources":["components/UI/Chart/ChartBar.tsx","components/UI/Chart/Chart.tsx","components/OrdersChart.tsx","components/OrdersFilter.tsx","pages/Profile.tsx","schemas/index.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ninterface ChartBarProps {\r\n  maxValue: number\r\n  value: number\r\n  label: string\r\n}\r\n\r\nconst ChartBar: React.FC<ChartBarProps> = ({ maxValue, value, label }) => {\r\n  let barFillHeight = '0%'\r\n\r\n  if (maxValue > 0) {\r\n    barFillHeight = Math.round((value / maxValue) * 100) + '%'\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-col items-center\">\r\n      <div className=\"h-full w-4 border border-gray-700 rounded-lg bg-purple-200 overflow-hidden flex flex-col justify-end\">\r\n        <div\r\n          className=\"bg-indigo-700 w-full transition-all duration-300 ease-out\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"font-bold text-xs text-center\">{label}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChartBar\r\n","import React from 'react'\r\nimport ChartBar from './ChartBar'\r\nimport { IChartDataPoints } from '../../../models/models'\r\n\r\ninterface ChartProps {\r\n  dataPoints: IChartDataPoints[]\r\n}\r\n\r\nconst Chart: React.FC<ChartProps> = ({ dataPoints }) => {\r\n  const dataPointValues = dataPoints.map((dataPoint) => dataPoint.value)\r\n  const totalMaximum = Math.max(...dataPointValues)\r\n\r\n  return (\r\n    <div className=\"p-3 rounded-md bg-purple-100 text-center flex justify-around h-40 mb-10\">\r\n      {dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\n\r\nimport Chart from './UI/Chart/Chart'\r\nimport { IOrderData } from '../models/models'\r\n\r\ninterface OrdersChartProps {\r\n  orders: IOrderData[]\r\n}\r\n\r\nconst OrdersChart: React.FC<OrdersChartProps> = ({ orders }) => {\r\n  const chartDataPoints = [\r\n    { label: 'Jan', value: 0 },\r\n    { label: 'Feb', value: 0 },\r\n    { label: 'Mar', value: 0 },\r\n    { label: 'Apr', value: 0 },\r\n    { label: 'May', value: 0 },\r\n    { label: 'Jun', value: 0 },\r\n    { label: 'Jul', value: 0 },\r\n    { label: 'Aug', value: 0 },\r\n    { label: 'Sep', value: 0 },\r\n    { label: 'Oct', value: 0 },\r\n    { label: 'Nov', value: 0 },\r\n    { label: 'Dec', value: 0 },\r\n  ]\r\n  if (orders) {\r\n    const months = orders.map((order) => {\r\n      let date = new Date(order.createdAt.substring(0, 10))\r\n      return date.getMonth()\r\n    })\r\n    chartDataPoints.map((chart, index) => {\r\n      if (months.includes(index)) {\r\n        chart.value = index\r\n      }\r\n      return chart\r\n    })\r\n  }\r\n\r\n  return <Chart dataPoints={chartDataPoints} />\r\n}\r\n\r\nexport default OrdersChart\r\n","import React from 'react'\r\n\r\ninterface OrdersFilterProps {\r\n  filterByYear: (year: string) => void\r\n  selectedYear: string\r\n}\r\n\r\nconst OrdersFilter: React.FC<OrdersFilterProps> = ({\r\n  filterByYear,\r\n  selectedYear,\r\n}) => {\r\n  const handleYearChangeHandler = (\r\n    event: React.ChangeEvent<HTMLSelectElement>\r\n  ) => {\r\n    const selectedYear = event.target.value\r\n    filterByYear(selectedYear)\r\n  }\r\n\r\n  return (\r\n    <div className=\"px-4\">\r\n      <div className=\"flex items-center justify-between my-4\">\r\n        <label className=\"font-bold mb-1\">Filter by year</label>\r\n        <select\r\n          className=\"font-bold px-4 py-2 rounded-md\"\r\n          value={selectedYear}\r\n          onChange={handleYearChangeHandler}\r\n        >\r\n          <option value=\"2023\">2023</option>\r\n          <option value=\"2022\">2022</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OrdersFilter\r\n","import React, { useState, useEffect } from 'react'\r\nimport { FormikHelpers, useFormik } from 'formik'\r\nimport { updateProfileShema } from '../schemas'\r\nimport {\r\n  useGetUserProfileQuery,\r\n  useUpdateUserProfileMutation,\r\n} from '../store/api/user.api'\r\nimport { IRegister } from '../models/models'\r\nimport { useGetMyOrdersQuery } from '../store/api/order.api'\r\nimport { useActions } from '../hooks/action'\r\nimport { Link } from 'react-router-dom'\r\nimport OrdersChart from '../components/OrdersChart'\r\nimport OrdersFilter from '../components/OrdersFilter'\r\n\r\nconst Profile: React.FC = () => {\r\n  const { data: user } = useGetUserProfileQuery()\r\n  const [year, setYear] = useState<string>('2023')\r\n  const [updateUserProfile] = useUpdateUserProfileMutation()\r\n  const { data: myOrders = [] } = useGetMyOrdersQuery()\r\n  const { setUserInfo } = useActions()\r\n  const onSubmitHandler = (\r\n    values: IRegister,\r\n    action: FormikHelpers<IRegister>\r\n  ) => {\r\n    updateUserProfile({\r\n      name: values.name,\r\n      email: values.email,\r\n      password: values.password,\r\n    })\r\n      .unwrap()\r\n      .then((response) => {\r\n        console.log(response)\r\n        setUserInfo(response)\r\n      })\r\n      .catch((error) => console.log('Update user profile error:', error))\r\n    action.resetForm()\r\n  }\r\n  const signUpForm = useFormik({\r\n    initialValues: {\r\n      name: user?.name || '',\r\n      email: user?.email || '',\r\n      password: '',\r\n      rePassword: '',\r\n    } as IRegister,\r\n    onSubmit: onSubmitHandler,\r\n    validationSchema: updateProfileShema,\r\n  })\r\n  const { values, handleChange, handleSubmit, errors, touched, setValues } =\r\n    signUpForm\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setValues({\r\n        name: user.name,\r\n        email: user.email,\r\n        password: values.password,\r\n      })\r\n    }\r\n  }, [user, setValues])\r\n  const filteredOrders = myOrders?.filter((order) => {\r\n    const date = new Date(order.createdAt.substring(0, 10))\r\n    return date.getFullYear().toString() === year\r\n  })\r\n\r\n  function filterByYear(year: string) {\r\n    setYear(year)\r\n  }\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 py-4 px-8 lg:px-0\">\r\n      <div className=\"px-4\">\r\n        <h2 className=\"title-2\">User Profile</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-box\">\r\n            <label htmlFor=\"\">Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"input\"\r\n              placeholder=\"Enter nama\"\r\n              name=\"name\"\r\n              value={values.name}\r\n              onChange={handleChange}\r\n            />\r\n            <p className=\"error\">\r\n              {errors.name && touched.name && errors.name}\r\n            </p>\r\n          </div>\r\n          <div className=\"input-box\">\r\n            <label htmlFor=\"\">Email Address</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"input\"\r\n              placeholder=\"Enter email\"\r\n              name=\"email\"\r\n              value={values.email}\r\n              onChange={handleChange}\r\n            />\r\n            <p className=\"error\">\r\n              {errors.email && touched.email && errors.email}\r\n            </p>\r\n          </div>\r\n          <div className=\"input-box\">\r\n            <label htmlFor=\"\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"input\"\r\n              placeholder=\"Enter password\"\r\n              name=\"password\"\r\n              value={values.password}\r\n              onChange={handleChange}\r\n            />\r\n            <p className=\"error\">\r\n              {errors.password && touched.password && errors.password}\r\n            </p>\r\n          </div>\r\n          <div className=\"input-box\">\r\n            <label htmlFor=\"\">Confirm Password</label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"input\"\r\n              placeholder=\"Enter confirm password\"\r\n              name=\"rePassword\"\r\n              value={values.rePassword}\r\n              onChange={handleChange}\r\n            />\r\n            <p className=\"error\">\r\n              {' '}\r\n              {errors.rePassword && touched.rePassword && errors.rePassword}\r\n            </p>\r\n          </div>\r\n          <button className=\"button\" type=\"submit\">\r\n            Sing Up\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div className=\"col-span-2 px-4 py-10\">\r\n        <h2 className=\"title-2 pb-4\">My Orders</h2>\r\n        <OrdersFilter filterByYear={filterByYear} selectedYear={year} />\r\n        {myOrders?.length > 0 && <OrdersChart orders={filteredOrders} />}\r\n        <div className=\"overflow-auto rounded-sm shadow-md hidden md:block\">\r\n          <table className=\"w-full\">\r\n            <thead className=\"bg-gray-50 border-b-2 border-gray-200\">\r\n              <tr>\r\n                <th className=\"w-40 p-3 text-sm font-semibold tracking-wide text-left\">\r\n                  No.\r\n                </th>\r\n                <th className=\"w-40 p-3 text-sm font-semibold tracking-wide text-left\">\r\n                  Date\r\n                </th>\r\n                <th className=\"w-40 p-3 text-sm font-semibold tracking-wide text-left\">\r\n                  Status\r\n                </th>\r\n                <th className=\"w-40 p-3 text-sm font-semibold tracking-wide text-left\">\r\n                  Total\r\n                </th>\r\n                <th className=\"w-40 p-3 text-sm font-semibold tracking-wide text-left\">\r\n                  Details\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"divide-y divide-gray-100\">\r\n              {myOrders?.map((myOrder) => (\r\n                <tr key={myOrder.id} className=\"bg-white\">\r\n                  <td className=\"p-3 text-sm text-gray-700 whitespace-nowrap\">\r\n                    <p className=\"font-bold text-blue-500 hover:underline\">\r\n                      {myOrder.id}\r\n                    </p>\r\n                  </td>\r\n                  <td className=\"p-3 text-sm text-gray-700 whitespace-nowrap\">\r\n                    {myOrder.createdAt.substring(0, 10)}\r\n                  </td>\r\n                  <td className=\"p-3 text-sm text-gray-700 whitespace-nowrap\">\r\n                    {myOrder.isDelivered ? (\r\n                      <span className=\"p-1.5 text-xs font-medium uppercase tracking-wider text-green-800 bg-green-200 rounded-lg bg-opacity-50\">\r\n                        Delivered\r\n                      </span>\r\n                    ) : myOrder.isPaid ? (\r\n                      <span className=\"p-1.5 text-xs font-medium uppercase tracking-wider text-yellow-800 bg-yellow-200 rounded-lg bg-opacity-50\">\r\n                        Shipped\r\n                      </span>\r\n                    ) : (\r\n                      <span className=\"p-1.5 text-xs font-medium uppercase tracking-wider text-green-800 bg-green-200 rounded-lg bg-opacity-50\">\r\n                        Delivered\r\n                      </span>\r\n                    )}\r\n                  </td>\r\n                  <td className=\"p-3 text-sm text-gray-700 whitespace-nowrap\">\r\n                    ${myOrder.totalPrice}\r\n                  </td>\r\n                  <td className=\"p-3 text-sm text-gray-700 whitespace-nowrap\">\r\n                    <Link className=\"button-sm\" to={`/order/${myOrder.id}`}>\r\n                      Details\r\n                    </Link>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 md:hidden\">\r\n          {myOrders?.map((myOrder) => (\r\n            <div\r\n              key={myOrder.id}\r\n              className=\"bg-white space-y-3 p-4 rounded-lg shadow\"\r\n            >\r\n              <div className=\"flex items-center space-x-2 text-sm\">\r\n                <div>\r\n                  <p className=\"text-blue-500 font-bold hover:underline\">\r\n                    {myOrder.id}\r\n                  </p>\r\n                </div>\r\n                <div className=\"text-gray-500\">\r\n                  {myOrder.createdAt.substring(0, 10)}\r\n                </div>\r\n                <div>\r\n                  <span className=\"p-1.5 text-xs font-medium uppercase tracking-wider text-green-800 bg-green-200 rounded-lg bg-opacity-50\">\r\n                    Delivered\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-sm font-medium text-black\">\r\n                ${myOrder.totalPrice}\r\n              </div>\r\n              <div className=\"text-sm text-gray-700\">\r\n                <Link className=\"button\" to={`/order/${myOrder.id}`}>\r\n                  Details\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import * as yup from 'yup'\r\n\r\nexport const signInShema = yup.object().shape({\r\n  email: yup.string().required('Email is required').email('Invalide email'),\r\n  password: yup\r\n    .string()\r\n    .required('Password is required')\r\n    .min(8, 'Password min 8'),\r\n})\r\n\r\nexport const signUpShema = yup.object().shape({\r\n  name: yup.string().required('Name is required'),\r\n  email: yup.string().required('Email is required').email('Invalide email'),\r\n  password: yup\r\n    .string()\r\n    .required('Password is required')\r\n    .min(8, 'Password min 8'),\r\n  rePassword: yup\r\n    .string()\r\n    .required('Confirm Password is required')\r\n    .oneOf([yup.ref('password')], 'Passwords must match'),\r\n})\r\n\r\nexport const shippingShema = yup.object().shape({\r\n  address: yup.string().required('Address is required'),\r\n  city: yup.string().required('City is required'),\r\n  postalCode: yup.number().required('Postal Code is required'),\r\n  country: yup.string().required('Country is required'),\r\n})\r\n\r\nexport const paymentMethodShema = yup.object().shape({\r\n  paymentMethod: yup.string().required('Payment method is required'),\r\n})\r\n\r\nexport const updateProfileShema = yup.object().shape({\r\n  name: yup.string(),\r\n  email: yup.string().email('Invalide email'),\r\n  password: yup.string().min(8, 'Password min 8'),\r\n  rePassword: yup.string().oneOf([yup.ref('password')], 'Passwords must match'),\r\n})\r\n\r\nexport const editUserShema = yup.object().shape({\r\n  name: yup.string(),\r\n  email: yup.string().email('Invalide email'),\r\n  isAdmin: yup.boolean(),\r\n})\r\n\r\nexport const leaveReviewShema = yup.object().shape({\r\n  rating: yup.number().required('Rating is required!'),\r\n  comment: yup.string(),\r\n})\r\n\r\nexport const createProductShema = yup.object().shape({\r\n  name: yup.string().required('Name is required'),\r\n  category: yup.string().required('Category is required'),\r\n  description: yup.string().required('Description is required'),\r\n  price: yup.number().required('Price is required'),\r\n  countInStock: yup.number().required('Count in stock is required'),\r\n  brand: yup.string().required('Brand is required'),\r\n  image: yup.string().required('Image is required'),\r\n})\r\n"],"names":["_ref","maxValue","value","label","barFillHeight","Math","round","_jsxs","className","children","_jsx","style","height","dataPoints","dataPointValues","map","dataPoint","totalMaximum","max","apply","_toConsumableArray","ChartBar","orders","chartDataPoints","months","order","Date","createdAt","substring","getMonth","chart","index","includes","Chart","filterByYear","selectedYear","onChange","event","target","user","useGetUserProfileQuery","data","_useState","useState","_useState2","_slicedToArray","year","setYear","_useUpdateUserProfile","useUpdateUserProfileMutation","updateUserProfile","_useGetMyOrdersQuery$","useGetMyOrdersQuery","myOrders","setUserInfo","useActions","signUpForm","useFormik","initialValues","name","email","password","rePassword","onSubmit","values","action","unwrap","then","response","console","log","catch","error","resetForm","validationSchema","updateProfileShema","handleChange","handleSubmit","errors","touched","setValues","useEffect","filteredOrders","filter","getFullYear","toString","htmlFor","type","placeholder","OrdersFilter","length","OrdersChart","myOrder","id","isDelivered","isPaid","totalPrice","Link","to","concat","signInShema","yup","shape","required","min","signUpShema","oneOf","shippingShema","address","city","postalCode","country","paymentMethodShema","paymentMethod","editUserShema","isAdmin","leaveReviewShema","rating","comment","createProductShema","category","description","price","countInStock","brand","image"],"sourceRoot":""}