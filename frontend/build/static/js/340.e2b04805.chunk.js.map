{"version":3,"file":"static/js/340.e2b04805.chunk.js","mappings":"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","sources":["pages/AdminUserEdit.tsx","schemas/index.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useFormik } from 'formik'\r\nimport { toast } from 'react-toastify'\r\nimport { editUserShema } from '../schemas'\r\nimport { IUpdateUser } from '../models/models'\r\nimport { useGetUserQuery, useUpdateUserMutation } from '../store/api/user.api'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\n\r\nconst AdminUserEdit = () => {\r\n  const params = useParams()\r\n  const navigate = useNavigate()\r\n  const userId = params.userId ? parseInt(params.userId, 10) : 0\r\n  const [updateUser] = useUpdateUserMutation()\r\n  const { data: user } = useGetUserQuery(userId)\r\n  const onSubmitHandler = (values: IUpdateUser) => {\r\n    updateUser({\r\n      name: values.name,\r\n      email: values.email,\r\n      isAdmin: values.isAdmin,\r\n      id: user?.id || 0,\r\n    })\r\n      .unwrap()\r\n      .then((response) => {\r\n        navigate(`/admin/user`)\r\n        toast.success(`User successfully updated!`)\r\n      })\r\n      .catch((error) => {\r\n        console.log('User update error:', error)\r\n        toast.error(`User didn't updated, error occured!`)\r\n      })\r\n  }\r\n  const editUserForm = useFormik({\r\n    initialValues: {\r\n      name: user?.name || '',\r\n      email: user?.email || '',\r\n      isAdmin: user?.isAdmin || false,\r\n    } as IUpdateUser,\r\n    onSubmit: onSubmitHandler,\r\n    validationSchema: editUserShema,\r\n  })\r\n  const { values, handleChange, handleSubmit, errors, touched, setValues } =\r\n    editUserForm\r\n  useEffect(() => {\r\n    if (user) {\r\n      setValues({\r\n        name: user.name,\r\n        email: user.email,\r\n        isAdmin: user.isAdmin,\r\n      })\r\n    }\r\n  }, [user, setValues])\r\n  return (\r\n    <div className=\"form-box\">\r\n      <h2 className=\"title\">Edit</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"input-box\">\r\n          <label htmlFor=\"\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"input\"\r\n            placeholder=\"Enter nama\"\r\n            name=\"name\"\r\n            value={values.name}\r\n            onChange={handleChange}\r\n          />\r\n          <p className=\"error\">{errors.name && touched.name && errors.name}</p>\r\n        </div>\r\n        <div className=\"input-box\">\r\n          <label htmlFor=\"\">Email Address</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"input\"\r\n            placeholder=\"Enter email\"\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n          />\r\n          <p className=\"error\">\r\n            {errors.email && touched.email && errors.email}\r\n          </p>\r\n        </div>\r\n        <div className=\"input-box\">\r\n          <label htmlFor=\"\">Is Admin</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"\"\r\n            name=\"isAdmin\"\r\n            checked={values.isAdmin}\r\n            onChange={handleChange}\r\n          />\r\n          <p className=\"error\">\r\n            {errors.isAdmin && touched.isAdmin && errors.isAdmin}\r\n          </p>\r\n        </div>\r\n\r\n        <button className=\"button\" type=\"submit\">\r\n          Edit User\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminUserEdit\r\n","import * as yup from 'yup'\r\n\r\nexport const signInShema = yup.object().shape({\r\n  email: yup.string().required('Email is required').email('Invalide email'),\r\n  password: yup\r\n    .string()\r\n    .required('Password is required')\r\n    .min(8, 'Password min 8'),\r\n})\r\n\r\nexport const signUpShema = yup.object().shape({\r\n  name: yup.string().required('Name is required'),\r\n  email: yup.string().required('Email is required').email('Invalide email'),\r\n  password: yup\r\n    .string()\r\n    .required('Password is required')\r\n    .min(8, 'Password min 8'),\r\n  rePassword: yup\r\n    .string()\r\n    .required('Confirm Password is required')\r\n    .oneOf([yup.ref('password')], 'Passwords must match'),\r\n})\r\n\r\nexport const shippingShema = yup.object().shape({\r\n  address: yup.string().required('Address is required'),\r\n  city: yup.string().required('City is required'),\r\n  postalCode: yup.number().required('Postal Code is required'),\r\n  country: yup.string().required('Country is required'),\r\n})\r\n\r\nexport const paymentMethodShema = yup.object().shape({\r\n  paymentMethod: yup.string().required('Payment method is required'),\r\n})\r\n\r\nexport const updateProfileShema = yup.object().shape({\r\n  name: yup.string(),\r\n  email: yup.string().email('Invalide email'),\r\n  password: yup.string().min(8, 'Password min 8'),\r\n  rePassword: yup.string().oneOf([yup.ref('password')], 'Passwords must match'),\r\n})\r\n\r\nexport const editUserShema = yup.object().shape({\r\n  name: yup.string(),\r\n  email: yup.string().email('Invalide email'),\r\n  isAdmin: yup.boolean(),\r\n})\r\n\r\nexport const leaveReviewShema = yup.object().shape({\r\n  rating: yup.number().required('Rating is required!'),\r\n  comment: yup.string(),\r\n})\r\n\r\nexport const createProductShema = yup.object().shape({\r\n  name: yup.string().required('Name is required'),\r\n  category: yup.string().required('Category is required'),\r\n  description: yup.string().required('Description is required'),\r\n  price: yup.number().required('Price is required'),\r\n  countInStock: yup.number().required('Count in stock is required'),\r\n  brand: yup.string().required('Brand is required'),\r\n  image: yup.string().required('Image is required'),\r\n})\r\n"],"names":["params","useParams","navigate","useNavigate","userId","parseInt","_useUpdateUserMutatio","useUpdateUserMutation","updateUser","_slicedToArray","user","useGetUserQuery","data","editUserForm","useFormik","initialValues","name","email","isAdmin","onSubmit","values","id","unwrap","then","response","toast","catch","error","console","log","validationSchema","editUserShema","handleChange","handleSubmit","errors","touched","setValues","useEffect","_jsxs","className","children","_jsx","htmlFor","type","placeholder","value","onChange","checked","signInShema","yup","shape","required","password","min","signUpShema","rePassword","oneOf","shippingShema","address","city","postalCode","country","paymentMethodShema","paymentMethod","updateProfileShema","leaveReviewShema","rating","comment","createProductShema","category","description","price","countInStock","brand","image"],"sourceRoot":""}